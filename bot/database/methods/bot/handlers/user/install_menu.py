import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.misc.language import Localization
from bot.misc.callbackData import InstallMenuCallback
from bot.misc.util import CONFIG
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from bot.database.main import engine
from bot.database.models.main import Keys
from sqlalchemy.orm import selectinload
from bot.misc.VPN.ServerManager import ServerManager
from bot.database.methods.get import get_name_location_server
import urllib.parse
import base64

log = logging.getLogger(__name__)

_ = Localization.text

async def install_main_menu(lang: str) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
    """
    text = _("install_main_menu", lang)
    kb = InlineKeyboardBuilder()
    
    kb.button(
        text="üì± iPhone | iPad (iOS)",
        callback_data=InstallMenuCallback(action="ios")
    )
    kb.button(
        text="ü§ñ Android",
        callback_data=InstallMenuCallback(action="android")
    )
    kb.button(
        text="Huawei",
        callback_data=InstallMenuCallback(action="huawei")
    )
    kb.button(
        text="üíª Windows",
        callback_data=InstallMenuCallback(action="windows")
    )
    kb.button(
        text="üçé MacOS",
        callback_data=InstallMenuCallback(action="macos")
    )
    kb.button(
        text="üì∫ TV",
        callback_data=InstallMenuCallback(action="tv")
    )
    kb.button(
        text="‚ûï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –≤—Ç–æ—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        callback_data=InstallMenuCallback(action="second_device")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def generate_deeplink(user_id: int, platform: str, lang: str, key_id: int = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç deeplink –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
    """
    log.info(f"Generating deeplink for user {user_id}, platform: {platform}, key_id: {key_id}")
    try:
        async with AsyncSession(autoflush=False, bind=engine()) as db:
            query = select(Keys).filter(Keys.user_tgid == user_id)
            if key_id:
                query = query.filter(Keys.id == key_id)
                log.debug(f"Filtering by key_id: {key_id}")
            else:
                query = query.order_by(Keys.subscription.desc())
                log.debug("No key_id provided, selecting latest key by subscription")
            query = query.options(selectinload(Keys.server_table))
            key = await db.execute(query)
            key = key.scalars().first()
            
            if key is None or key.server_table is None:
                log.warning(f"No active keys or server table for user {user_id}, key_id {key_id}")
                return None
            
            log.debug(f"Selected key: {key.id}, server_id: {key.server_table.id}")
            server_manager = ServerManager(key.server_table)
            await server_manager.login()
            name_location = await get_name_location_server(key.server_table.id)
            name_location = name_location.replace("–ì–µ—Ä–º–∞–Ω–∏—è", "Germany")
            config = await server_manager.get_key(
                user_id,
                name_key=name_location,
                key_id=key.id
            )
            
            if config is None:
                log.error(f"Failed to generate config for user {user_id}, key {key.id}")
                return None
            
            log.debug(f"Generated config: {config}")
            if "&flow=" not in config:
                config = config + "&flow=xtls-rprx-vision"
                log.debug(f"Added flow parameter: {config}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º deeplink
            encoded_vless = urllib.parse.quote(config, safe='~()*!.\'')
            if platform == "ios":
                deeplink = f"v2raytun://import/{encoded_vless}"
            elif platform in ["android", "huawei"]:
                deeplink = f"v2raytun://import/{encoded_vless}"
            else:
                log.error(f"Unsupported platform: {platform}")
                return None
            
            log.debug(f"Generated deeplink: {deeplink}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç-—Å—Å—ã–ª–∫—É
            redirect_file = f"redirect_{platform}.html"
            redirect_base_url = "http://85.192.63.159:8080"
            redirect_url = f"{redirect_base_url}/{redirect_file}?deeplink={urllib.parse.quote(deeplink)}&vless={urllib.parse.quote(config)}&platform={platform}"
            
            log.info(f"Generated redirect URL for user {user_id}, platform: {platform}, key_id: {key_id}, url: {redirect_url}")
            return redirect_url
    except Exception as e:
        log.error(f"Error generating deeplink for user {user_id}, platform {platform}, key_id {key_id}: {e}", exc_info=True)
        return None

async def ios_install_menu(lang: str, user_id: int = None, key_id: int = None) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ iOS.
    """
    text = (
        "üì± " + _("auto_setup", lang) + "\n\n"
        "‚ûä " + _("install_v2raytun", lang) + "\n"
        "üîÅ " + _("return_to_chat", lang) + "\n"
        "‚ûã " + _("press_configure", lang) + "\n"
        "‚úÖ " + _("allow_app_open", lang) + "\n"
        "‚ûå " + _("press_enable_button", lang) + "\n"
        "‚úÖ " + _("allow_config_add", lang) + "\n\n"
        "‚ùóÔ∏è " + _("if_v2raytun_unsupported", lang)
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text="1Ô∏è‚É£ " + _("install_app_btn", lang),
        url="https://apps.apple.com/ru/app/v2raytun/id6476628951"
    )
    if user_id and key_id:
        redirect_url = await generate_deeplink(user_id, "ios", lang, key_id=key_id)
        if redirect_url:
            kb.button(
                text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
                url=redirect_url
            )
        else:
            kb.button(
                text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
                callback_data=InstallMenuCallback(action="no_key_ios")
            )
    else:
        kb.button(
            text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
            callback_data=InstallMenuCallback(action="no_key_ios")
        )
    kb.button(
        text="üìû V2Box (" + _("if_v2raytun_not_working", lang) + ")",
        callback_data=InstallMenuCallback(action="v2box_ios")
    )
    kb.button(
        text="üÜò " + _("problems_occurred_btn", lang),
        callback_data=InstallMenuCallback(action="manual_install_ios")
    )
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def android_install_menu(lang: str, user_id: int = None, key_id: int = None) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ Android.
    """
    text = (
        "üì± " + _("auto_setup", lang) + "\n\n"
        "‚ûä " + _("install_v2raytun", lang) + "\n"
        "üîÅ " + _("return_to_chat", lang) + "\n"
        "‚ûã " + _("press_configure", lang) + "\n"
        "‚úÖ " + _("allow_app_open", lang) + "\n"
        "‚ûå " + _("press_enable_button", lang) + "\n"
        "‚úÖ " + _("allow_config_add", lang) + "\n\n"
        "‚ùóÔ∏è " + _("if_v2raytun_unsupported", lang)
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text="1Ô∏è‚É£ " + _("install_app_btn", lang),
        url="https://play.google.com/store/apps/details?id=com.v2raytun.android"
    )
    if user_id and key_id:
        redirect_url = await generate_deeplink(user_id, "android", lang, key_id=key_id)
        if redirect_url:
            kb.button(
                text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
                url=redirect_url
            )
        else:
            kb.button(
                text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
                callback_data=InstallMenuCallback(action="no_key_android")
            )
    else:
        kb.button(
            text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
            callback_data=InstallMenuCallback(action="no_key_android")
        )
    kb.button(
        text="üìû V2Box (" + _("if_v2raytun_not_working", lang) + ")",
        callback_data=InstallMenuCallback(action="v2box_android")
    )
    kb.button(
        text="üÜò " + _("problems_occurred_btn", lang),
        callback_data=InstallMenuCallback(action="manual_install_android")
    )
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def huawei_install_menu(lang: str, user_id: int = None, key_id: int = None) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ Huawei.
    """
    text = (
        "üì± " + _("auto_setup", lang) + "\n\n"
        "‚ûä " + _("install_v2raytun", lang) + "\n"
        "üîÅ " + _("return_to_chat", lang) + "\n"
        "‚ûã " + _("press_configure", lang) + "\n"
        "‚úÖ " + _("allow_app_open", lang) + "\n"
        "‚ûå " + _("press_enable_button", lang) + "\n"
        "‚úÖ " + _("allow_config_add", lang)
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text="1Ô∏è‚É£ " + _("install_app_btn", lang),
        url="https://appgallery.huawei.com/app/v2raytun"
    )
    if user_id and key_id:
        redirect_url = await generate_deeplink(user_id, "huawei", lang, key_id=key_id)
        if redirect_url:
            kb.button(
                text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
                url=redirect_url
            )
        else:
            kb.button(
                text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
                callback_data=InstallMenuCallback(action="no_key_huawei")
            )
    else:
        kb.button(
            text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
            callback_data=InstallMenuCallback(action="no_key_huawei")
        )
    kb.button(
        text="üÜò " + _("problems_occurred_btn", lang),
        callback_data=InstallMenuCallback(action="manual_install_huawei")
    )
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def windows_install_menu(lang: str) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ Windows.
    """
    text = (
        "üñ•Ô∏è " + _("windows_setup_prompt", lang) + "\n\n"
        "‚Æï " + _("vpn_for_selected_apps", lang) + "\n"
        "‚Æï " + _("vpn_for_entire_pc", lang) + "\n"
        "‚Æï " + _("internet_not_working", lang)
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text=_("vpn_for_selected_apps_btn", lang),
        url="https://telegra.ph/vpn-selected-apps"
    )
    kb.button(
        text=_("vpn_for_entire_pc_btn", lang),
        url="https://telegra.ph/vpn-entire-pc"
    )
    kb.button(
        text=_("internet_not_working_btn", lang),
        url="https://telegra.ph/internet-not-working"
    )
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def macos_install_menu(lang: str) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ MacOS.
    """
    text = (
        "üçé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è MacOS:\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
        "‚Ä¢ –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ ‚Üí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–µ—Ç–µ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–¥ –í–∞–º–∏ –±—É–¥–µ—Ç –í–∞—à –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ (vless://‚Ä¶..), –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n"
        "4Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTun <a href=\"https://apps.apple.com/ru/app/v2raytun/id6476628951?tgme_nopreview=1\">—Ç—É—Ç</a> –∏–ª–∏ Streisand <a href=\"https://apps.apple.com/ru/app/streisand/id6450534064?tgme_nopreview=1\">—Ç—É—Ç</a> –∏–ª–∏ V2Box <a href=\"https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690?tgme_nopreview=1\">—Ç—É—Ç</a> (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ –û–° –∏ —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –≤–∞—Å)\n"
        "5Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '+' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        "6Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞¬ª –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é\n"
        "7Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!"
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def tv_install_menu(lang: str) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ TV —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    text = (
        "üì∫ " + _("tv_device_type", lang) + "\n\n"
        "‚Ä¢ " + _("android_tv", lang) + "\n"
        "‚Ä¢ " + _("apple_tv", lang) + "\n"
        "‚Ä¢ " + _("yandex_tv", lang) + "\n\n"
        "‚ùóÔ∏è " + _("tv_requirements", lang)
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text=_("android_tv_btn", lang),
        url="https://telegra.ph/android-tv"
    )
    kb.button(
        text=_("apple_tv_btn", lang),
        url="https://telegra.ph/apple-tv"
    )
    kb.button(
        text=_("yandex_tv_btn", lang),
        url="https://telegra.ph/yandex-tv"
    )
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def second_device_install_menu(lang: str) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
    """
    text = (
        "üì± –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Ç–æ—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
        "‚Ä¢ –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ ‚Üí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–µ—Ç–µ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–¥ –í–∞–º–∏ –±—É–¥–µ—Ç –í–∞—à –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ (vless://‚Ä¶..), –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n"
        "4Ô∏è‚É£ –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Ç–æ—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–¥–∂–µ—Ä)\n"
        "5Ô∏è‚É£ –ù–∞ –≤—Ç–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–ª–∞–Ω—à–µ—Ç): —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTun\n"
        "   ‚Ä¢ –ï—Å–ª–∏ V2RayTun –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ V2Box\n"
        "6Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞ –≤—Ç–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "7Ô∏è‚É£ –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ V2RayTun –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞¬ª\n"
        "   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É\n"
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def manual_install_menu(lang: str, device: str, user_id: int = None, key_id: int = None) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (iOS, Android, Huawei) —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    """
    text = (
        "üìù " + _("manual_install", lang) + "\n\n"
        "1Ô∏è‚É£ " + _("download_v2raytun", lang) + "\n"
        "2Ô∏è‚É£ " + _("remove_old_configs", lang) + "\n"
        "3Ô∏è‚É£ " + _("return_to_bot", lang) + "\n"
        "4Ô∏è‚É£ " + _("open_main_menu", lang) + "\n"
        "5Ô∏è‚É£ " + _("go_to_subscription", lang) + "\n"
        "6Ô∏è‚É£ " + _("select_active_key", lang) + "\n"
        "7Ô∏è‚É£ " + _("copy_key", lang) + "\n"
        "üîÅ " + _("return_to_v2raytun", lang) + "\n"
        "8Ô∏è‚É£ " + _("add_config_plus", lang) + "\n"
        "9Ô∏è‚É£ " + _("add_from_clipboard", lang) + "\n"
        "üîü " + _("allow_paste", lang) + "\n"
        "‚úÖ " + _("enable_v2raytun", lang) + "\n\n"
        "‚ùóÔ∏è " + _("if_problems_persist", lang) + "\n"
        "üë®üèº‚Äçüíª " + _("contact_support", lang)
    )
    
    kb = InlineKeyboardBuilder()
    if user_id and key_id:
        redirect_url = await generate_deeplink(user_id, device, lang, key_id=key_id)
        if redirect_url:
            kb.button(
                text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
                url=redirect_url
            )
        else:
            kb.button(
                text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
                callback_data=InstallMenuCallback(action=f"no_key_{device}")
            )
    else:
        kb.button(
            text="2Ô∏è‚É£ " + _("configure_connection_btn", lang),
            callback_data=InstallMenuCallback(action=f"no_key_{device}")
        )
    kb.button(
        text=" " + _("write_to_support_btn", lang),
        url="https://t.me/suppotyspn_bot"
    )
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()

async def v2box_instruction(lang: str, device: str) -> tuple[str, InlineKeyboardMarkup]:
    """
    –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è V2Box (iOS –∏ Android).
    """
    text = (
        "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ V2Box:\n\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ V2Box\n1.1 iPhone | iPad <a href=\"https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690?tgme_nopreview=1\">V2BOX</a>\n"
        "1.2 Android <a href=\"https://play.google.com/store/apps/details?id=dev.hexasoftware.v2box&hl=ru&pli=1?tgme_nopreview=1\">V2BOX</a>\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîë –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "4Ô∏è‚É£ –ü–µ—Ä–µ–¥ –í–∞–º–∏ –±—É–¥–µ—Ç –í–∞—à –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ (vless://‚Ä¶..), –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n"
        "5Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2BOX, –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–∏–∑—É ¬´Configs¬ª ‚Üí –Ω–∞–∂–º–∏—Ç–µ ¬´+¬ª –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É ‚Üí –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–¥–ø–∏—Å—å ¬´Import v2ray uri from clipboard¬ª –∏–ª–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞¬ª\n"
        "6Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!"
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text="üì± " + _("choose_another_device_btn", lang),
        callback_data=InstallMenuCallback(action="main_menu")
    )
    kb.button(
        text=_("back_general_menu_btn", lang),
        callback_data="back_general_menu_btn"
    )
    
    kb.adjust(1)
    return text, kb.as_markup()